theme(axis.text.x = element_blank(),  # Hide x-axis SNP labels for clarity
axis.ticks.x = element_blank())
write.table(gwas_results, "GWAS_results.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(gwas_results_pca, "GWAS_results_PCA.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
gwas_glm_pca_df <- data.frame(SNP = colnames(X)[-1], Pvalue = gwas_glm_pca_results)
# Convert PCA GWAS results into dataframe
gwas_pca_df <- data.frame(SNP = colnames(X)[-1], Pvalue = gwas_results_pca$p_values)
# Manhattan Plot for GWAS with PCA Correction
ggplot(gwas_pca_df, aes(x = seq_along(SNP), y = -log10(Pvalue))) +
geom_point(color = "blue", alpha = 0.7) +
theme_minimal() +
labs(title = "GWAS Manhattan Plot (GLM with PCA Correction)",
x = "SNP Index",
y = "-log10(P-value)") +
geom_hline(yintercept = -log10(0.05 / nrow(gwas_pca_df)), color = "red", linetype = "dashed") +
theme(axis.text.x = element_blank())  # Hides x-axis labels for clarity
ggplot(gwas_results_df, aes(x = 1:nrow(gwas_results_df), y = logP, color = Chromosome)) +
geom_point(alpha = 0.75, size = 1.5) +
scale_color_manual(values = rep(c("blue", "red", "darkgreen", "purple", "orange"), length.out = length(unique(gwas_results_df$Chromosome)))) +
theme_minimal() +
labs(title = "Manhattan Plot of GWAS Results (GLM)",
x = "SNP Index",
y = "-log10(P-value)") +
geom_hline(yintercept = -log10(0.05/nrow(gwas_results_df)), linetype = "dashed", color = "black") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Load SNP information file containing chromosome info
snp_info <- read.table("snp_info.txt", header = TRUE, sep = "\t")
# Load SNP information file containing chromosome info
snp_info <- read.table("snp_info.txt", header = TRUE, sep = "\t")
# Merge the SNP info (Chromosome) with the GWAS results
gwas_results_df <- merge(gwas_results_df, snp_info, by = "SNP")
ggplot(gwas_results_df, aes(x = 1:nrow(gwas_results_df), y = logP, color = Chromosome)) +
geom_point(alpha = 0.75, size = 1.5) +
scale_color_manual(values = rep(c("blue", "red", "darkgreen", "purple", "orange"), length.out = length(unique(gwas_results_df$Chromosome)))) +
theme_minimal() +
labs(title = "Manhattan Plot of GWAS Results (GLM)",
x = "SNP Index",
y = "-log10(P-value)") +
geom_hline(yintercept = -log10(0.05/nrow(gwas_results_df)), linetype = "dashed", color = "black") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Create Manhattan plot with each chromosome as a different color and separated by chromosomes
ggplot(gwas_results_df, aes(x = 1:nrow(gwas_results_df), y = logP, color = factor(Chromosome))) +
geom_point(alpha = 0.75, size = 1.5) +
scale_color_manual(values = c("blue", "red", "green", "purple", "orange", "brown", "pink", "yellow")) +  # Customize colors
facet_wrap(~Chromosome, scales = "free_x", ncol = 1) +  # Separate by chromosome
theme_minimal() +
labs(title = "Manhattan Plot of GWAS Results (GLM with PCA)",
x = "SNP Index",
y = "-log10(P-value)") +
geom_hline(yintercept = -log10(0.05 / nrow(gwas_results_df)), linetype = "dashed", color = "black") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 12))  # Customize facet labels
# Generate Manhattan plot
ggplot(gwas_results_df, aes(x = cumulative_position, y = logP, color = factor(Chromosome))) +
geom_point(alpha = 0.75, size = 1.5) +
scale_color_manual(values = c("blue", "red", "green", "purple", "orange", "brown", "pink", "yellow")) +  # Customize colors for chromosomes
theme_minimal() +
labs(title = "Manhattan Plot of GWAS Results (GLM with PCA)",
x = "Chromosome",
y = "-log10(P-value)") +
geom_hline(yintercept = -log10(0.05 / nrow(gwas_results_df)), linetype = "dashed", color = "black") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_x_continuous(labels = NULL, breaks = NULL)  # Hide x-axis labels and ticks for clarity
# Add a cumulative position for each SNP along the x-axis
gwas_results_df <- gwas_results_df %>%
group_by(Chromosome) %>%
arrange(Chromosome, logP) %>%
mutate(cumulative_position = cumsum(c(1, diff(as.numeric(Chromosome)) != 0)))
# Generate Manhattan plot
ggplot(gwas_results_df, aes(x = cumulative_position, y = logP, color = factor(Chromosome))) +
geom_point(alpha = 0.75, size = 1.5) +
scale_color_manual(values = c("blue", "red", "green", "purple", "orange", "brown", "pink", "yellow")) +  # Customize colors for chromosomes
theme_minimal() +
labs(title = "Manhattan Plot of GWAS Results (GLM with PCA)",
x = "Chromosome",
y = "-log10(P-value)") +
geom_hline(yintercept = -log10(0.05 / nrow(gwas_results_df)), linetype = "dashed", color = "black") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_x_continuous(labels = NULL, breaks = NULL)  # Hide x-axis labels and ticks for clarity
# Step 1: Convert Chromosome names into factors (to preserve order) and assign sequential positions
gwas_results_df <- gwas_results_df %>%
mutate(Chromosome = factor(Chromosome, levels = unique(Chromosome)))  # Ensure chromosomes are ordered
# Step 2: Add a cumulative position for each SNP along the x-axis
gwas_results_df <- gwas_results_df %>%
group_by(Chromosome) %>%
arrange(Chromosome, logP) %>%
mutate(cumulative_position = row_number())  # This will assign sequential positions for each SNP
# Step 3: Generate the Manhattan Plot
ggplot(gwas_results_df, aes(x = cumulative_position, y = logP, color = factor(Chromosome))) +
geom_point(alpha = 0.75, size = 1.5) +
scale_color_manual(values = c("blue", "red", "green", "purple", "orange", "brown", "pink", "yellow")) +  # Customize colors for chromosomes
theme_minimal() +
labs(title = "Manhattan Plot of GWAS Results (GLM with PCA)",
x = "Chromosome",
y = "-log10(P-value)") +
geom_hline(yintercept = -log10(0.05 / nrow(gwas_results_df)), linetype = "dashed", color = "black") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_x_continuous(labels = NULL, breaks = NULL)  # Hide x-axis labels and ticks for clarity
# Install and load the package if not already done
devtools::install("C:/Users/bipin.neupane/OneDrive - Washington State University (email.wsu.edu)/Education/WSU/Courses/Statistical Genomics/HW1/neugene")
# Load additional libraries for visualization
library(ggplot2)
library(dplyr)
setwd("C:/Users/bipin.neupane/OneDrive - Washington State University (email.wsu.edu)/Education/WSU/Courses/Statistical Genomics/HW1/neugene")
# Load data from text files (assuming tab-delimited; adjust if needed)
y <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
X <- read.table("Gapit_genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
C <- read.table("covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
snp_info <- read.table("snp_info.txt", header = TRUE)
gwas_results <- run_gwas_glm(y, X, C)
gwas_results_pca <- run_gwas_glm_pca(y, X, C, snp_info, npc = 5)  # Using 5 PCs
devtools::load_all("C:/Users/bipin.neupane/.../neugene")
devtools::load_all()
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("neugene")
# Install and load the package if not already done
devtools::install("C:/Users/bipin.neupane/OneDrive - Washington State University (email.wsu.edu)/Education/WSU/Courses/Statistical Genomics/HW1/neugene")
library(neugene)
roxygen2::roxygenise()
unlink("C:/Users/bipin.neupane/AppData/Local/R/win-library/4.3/R6", recursive = TRUE, force = TRUE)
install.packages("R6")
roxygen2::roxygenise()
devtools::install()
update.packages(ask = FALSE)
devtools::find_rtools()
devtools::install()
?run_gwas_glm_pca
?perform_pca
?run_gwas_glm
library(neugene)
setwd("C:/Users/bipin.neupane/OneDrive - Washington State University (email.wsu.edu)/Education/WSU/Courses/Statistical Genomics/HW1/neugene")
# Load data from text files (assuming tab-delimited; adjust if needed)
y <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
X <- read.table("Gapit_genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
C <- read.table("covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
snp_info <- read.table("snp_info.txt", header = TRUE)
# Convert to numeric in case some columns were read as character
y <- data.frame(lapply(y, as.numeric))
# Load data from text files (assuming tab-delimited; adjust if needed)
y <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
X <- read.table("Gapit_genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
C <- read.table("covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
snp_info <- read.table("snp_info.txt", header = TRUE)
# Check structure
str(y)
gwas_results <- run_gwas_glm(y, X, C)
# Check structure
str(y)
str(X)
str(C)
# Convert to numeric in case some columns were read as character
y <- data.frame(lapply(y, as.numeric))
X <- data.frame(lapply(X, as.numeric))
C <- data.frame(lapply(C, as.numeric))
# Check structure
str(y)
str(X)
str(C)
gwas_results <- run_gwas_glm(y, X, C)
# Load data from text files (assuming tab-delimited; adjust if needed)
y <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
X <- read.table("Gapit_genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
C <- read.table("covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
snp_info <- read.table("snp_info.txt", header = TRUE)
# Check structure
str(y)
str(X)
str(C)
cat("Dimensions of y:", dim(y), "\n")  # Should be (n, 1)
cat("Dimensions of X:", dim(X), "\n")  # Should be (n, m)
cat("Dimensions of C:", dim(C), "\n")  # Should be (n, t)
gwas_results <- run_gwas_glm(y, X, C)
# Load data from text files (assuming tab-delimited; adjust if needed)
y <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
X <- read.table("Gapit_genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
C <- read.table("covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
snp_info <- read.table("snp_info.txt", header = TRUE)
# Remove the first column (assumed to be non-numeric) from each dataset
y <- y[, -1]  # Remove first column in y
X <- X[, -1]  # Remove first column in X
C <- C[, -1]  # Remove first column in C
snp_info <- snp_info[, -1]  # Remove first column in snp_info (if applicable)
# Convert to numeric in case some columns were read as character
y <- data.frame(lapply(y, as.numeric))
X <- data.frame(lapply(X, as.numeric))
C <- data.frame(lapply(C, as.numeric))
# Check structure
str(y)
str(X)
str(C)
gwas_results <- run_gwas_glm(y, X, C)
# Check structure
str(y)
# Load data from text files (assuming tab-delimited; adjust if needed)
y <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
X <- read.table("Gapit_genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
C <- read.table("covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
snp_info <- read.table("snp_info.txt", header = TRUE)
y <- data.frame(phadebas = as.numeric(y[[2]]))  # Keep only phenotype column as numeric vector
X <- X  # Keep original structure (taxa in first column)
C <- C  # Keep original structure (taxa in first column)
snp_info <- snp_info[, 2:4]  # Keep SNP, Chromosome, Position
snp_info
snp_info <- snp_info[, 1:3]  # Keep SNP, Chromosome, Position
colnames(snp_info) <- c("SNP", "Chromosome", "Position")
gwas_results <- run_gwas_glm(y, X, C)
View(y)
View(y)
View(y)
gwas_results <- run_gwas_glm(y = y, X = X, C = C, snp_info = snp_info)
y <- as.numeric(y[, 2])
y <- as.numeric(y[,1])  # Extracts the first column and ensures numeric type
gwas_results <- run_gwas_glm(y = y, X = X, C = C, snp_info = snp_info)
cat("Length of y:", length(y), "\n")  # Should be 254
cat("Dimensions of X:", dim(X), "\n")  # Should be (254, num_SNPs)
cat("Dimensions of C:", dim(C), "\n")  # Should be (254, num_covariates)
cat("Dimensions of snp_info:", dim(snp_info), "\n")  # Should be (num_SNPs, ?)
snp_info <- read.table("snp_info.txt", header = TRUE)
snp_info
head(colnames(X))  # Check first few SNP names in X
head(snp_info$SNP)  # Check first few SNP names in snp_info
colnames(X) <- sub("^X(\\d+_\\d+)$", "\\1", colnames(X))  # Remove "X" from numeric SNPs
head(colnames(X))  # Check if "X" is removed where needed
all(colnames(X)[-1] %in% snp_info$SNP)  # Should return TRUE
snp_info <- snp_info[match(colnames(X)[-1], snp_info$SNP), ]  # Ensure same order
gwas_results <- run_gwas_glm(y = y, X = X[, -1], C = C, snp_info = snp_info)  # Remove taxa column
cat("Dimensions of y:", dim(y), "\n")        # Should be (n, 1)
cat("Dimensions of X:", dim(X), "\n")        # Should be (n, m) after removing taxa
cat("Dimensions of C:", dim(C), "\n")        # Should be (n, t)
cat("Number of SNPs in snp_info:", nrow(snp_info), "\n")  # Should match ncol(X) -
colnames(X) <- sub("^X(\\d+_\\d+)$", "\\1", colnames(X))  # Remove "X" from numeric SNPs
snp_info <- snp_info[snp_info$SNP %in% colnames(X)[-1], ]  # Keep only existing SNPs
cat("Number of SNPs in X (after taxa removal):", ncol(X) - 1, "\n")
cat("Number of SNPs in snp_info:", nrow(snp_info), "\n")
y <- y[y$taxa %in% common_taxa, , drop = FALSE]
y <- y[y$taxa %in% common_taxa, , drop = FALSE]
y <- read.table("phenotype.txt", header = TRUE, stringsAsFactors = FALSE)
str(y)  # Check structure
if (!is.data.frame(y)) {
y <- as.data.frame(y)
}
if (!"taxa" %in% colnames(y)) stop("Error: `taxa` column missing in Phenotype file.")
C <- read.table("Covariate.txt", header = TRUE, stringsAsFactors = FALSE)
C <- read.table("covariate.txt", header = TRUE, stringsAsFactors = FALSE)
C <- read.table("covariates.txt", header = TRUE, stringsAsFactors = FALSE)
if (!"taxa" %in% colnames(C)) stop("Error: `taxa` column missing in Covariates file.")
X <- read.table("Gapit_genotype.txt", header = TRUE, stringsAsFactors = FALSE)
if (!"taxa" %in% colnames(X)) stop("Error: `taxa` column missing in Genotype file.")
snp_info <- read.table("snp_info.txt", header = TRUE, stringsAsFactors = FALSE)
if (!"SNP" %in% colnames(snp_info)) stop("Error: `SNP` column missing in SNP info file.")
common_taxa <- Reduce(intersect, list(y$taxa, C$taxa, X$taxa))
y <- y[y$taxa %in% common_taxa, , drop = FALSE]
C <- C[C$taxa %in% common_taxa, , drop = FALSE]
X <- X[X$taxa %in% common_taxa, , drop = FALSE]
cat("Final number of taxa:", nrow(y), nrow(X), nrow(C), "\n")
colnames(X) <- sub("^X(\\d+_\\d+)$", "\\1", colnames(X))
snp_info <- snp_info[snp_info$SNP %in% colnames(X)[-1], ]  # Remove taxa column
gwas_results <- run_gwas_glm(y$phadebas, X[, -1], C[, -1], snp_info)
library(ggplot2)
gwas_results <- run_gwas_glm(y$phadebas, X[, -1], C[, -1], snp_info)
print(manhattan_plot)
devtools::document()
?perform_pca
?run_gwas_glm
?run_gwas_glm_pca
library(neugene)
# Load additional libraries for visualization
library(ggplot2)
library(dplyr)
# Load data
y <- read.table("phenotype.txt", header = TRUE)  # n x 1
X <- read.table("GAPIT_genotype.txt", header = TRUE)  # n x (m+1)
C <- read.table("covariates.txt", header = TRUE)  # n x (t+1)
snp_info <- read.table("snp_info.txt", header = TRUE)
# Run analyses
glm_results <- run_gwas_glm(y, X, C, snp_info)
pca_results <- run_gwas_glm_pca(y, X, C, snp_info, npc = 5)
pca_results <- run_gwas_glm_pca(y, X, C, snp_info, npc = 5)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# Load data
y <- read.table("phenotype.txt", header = TRUE)  # n x 1
X <- read.table("GAPIT_genotype.txt", header = TRUE)  # n x (m+1)
C <- read.table("covariates.txt", header = TRUE)  # n x (t+1)
snp_info <- read.table("snp_info.txt", header = TRUE)
# Run analyses
glm_results <- run_gwas_glm(y, X, C, snp_info)
View(glm_results)
View(glm_results)
pca_results <- run_gwas_glm_pca(y, X, C, snp_info, npc = 5)
# Save plots
ggsave("manhattan_glm.png", glm_results$manhattan_plot)
ggsave("manhattan_pca.png", pca_results$manhattan_plot)
devtools::document()
library(neugene)
# Load additional libraries for visualization
library(ggplot2)
library(dplyr)
setwd("C:/Users/bipin.neupane/OneDrive - Washington State University (email.wsu.edu)/Education/WSU/Courses/Statistical Genomics/HW1/neugene")
# Load phenotype data
phenotype <- read.table("phenotype.txt", header = TRUE)
# Load genotype data
genotype <- read.table("GAPIT_genotype.txt", header = TRUE)
# Load covariate data
covariates <- read.table("covariates.txt", header = TRUE)
# Load SNP information
snp_info <- read.table("snp_info.txt", header = TRUE)
# Run GWAS using General Linear Model (GLM)
gwas_glm_results <- run_gwas_glm(y = phenotype, X = genotype, C = covariates, snp_info = snp_info)
# Extract p-values and results
glm_results <- gwas_glm_results$results
glm_manhattan <- gwas_glm_results$manhattan_plot
glm_qq <- gwas_glm_results$qq_plot
# Print results
head(glm_results)
print(glm_manhattan)
# Extract p-values and results
pca_results <- gwas_glm_pca_results$results
# Run GWAS using GLM with PCA correction
gwas_glm_pca_results <- run_gwas_glm_pca(y = phenotype, X = genotype, C = covariates, snp_info = snp_info, npc = 5)
# Run GWAS using GLM with PCA correction
gwas_glm_pca_results <- run_gwas_glm_pca(y = phenotype, X = genotype, C = covariates, snp_info = snp_info, npc = 5)
# Print results
head(pca_results)
print(glm_qq)
library(writexl)
# Save GWAS GLM results
write_xlsx(glm_results, "GLM_GWAS_Results.xlsx")
# Save GWAS PCA results
write_xlsx(pca_results, "GLM_PCA_GWAS_Results.xlsx")
print("GWAS results saved as Excel files in the working directory.")
# Ensure results are data frames before writing to Excel
glm_results_df <- as.data.frame(glm_results)
pca_results_df <- as.data.frame(pca_results)
# Extract only the results (excluding plots) and ensure it's a data frame
glm_results_df <- as.data.frame(gwas_glm_results$results)
pca_results_df <- as.data.frame(gwas_glm_pca_results$results)
# Ensure results are data frames before writing to Excel
glm_results_df <- as.data.frame(glm_results)
pca_results_df <- as.data.frame(pca_results)
# Extract only the results (excluding plots) and ensure it's a data frame
glm_results_df <- as.data.frame(gwas_glm_results$results)
pca_results_df <- as.data.frame(gwas_glm_pca_results$results)
# Run GWAS using GLM with PCA correction
gwas_glm_pca_results <- run_gwas_glm_pca(y = phenotype, X = genotype, C = covariates, snp_info = snp_info, npc = 5)
pca_qq <- gwas_glm_pca_results$qq_plot
pca_scree <- gwas_glm_pca_results$pca_plots$scree_plot
pca_scores <- gwas_glm_pca_results$pca_plots$pca_plot
test_results <- run_gwas_glm_pca(y = phenotype, X = genotype, C = covariates, snp_info = snp_info, npc = 5)
devtools::document()
devtools::document()
devtools::document()
devtools::clean_and_rebuild()
devtools::clean_dll()
devtools::document()
library(neugene)
# Load additional libraries for visualization
library(ggplot2)
library(dplyr)
# Load phenotype data
phenotype <- read.table("phenotype.txt", header = TRUE)
# Load genotype data
genotype <- read.table("GAPIT_genotype.txt", header = TRUE)
# Load covariate data
covariates <- read.table("covariates.txt", header = TRUE)
# Load SNP information
snp_info <- read.table("snp_info.txt", header = TRUE)
# Run GWAS using General Linear Model (GLM)
gwas_glm_results <- run_gwas_glm(y = phenotype, X = genotype, C = covariates, snp_info = snp_info)
# Extract p-values and results
glm_results <- gwas_glm_results$results
glm_manhattan <- gwas_glm_results$manhattan_plot
glm_qq <- gwas_glm_results$qq_plot
# Print results
head(glm_results)
# Run GWAS using GLM with PCA correction
gwas_glm_pca_results <- run_gwas_glm_pca(y = phenotype, X = genotype, C = covariates, snp_info = snp_info, npc = 5)
# Extract p-values and results
pca_results <- gwas_glm_pca_results$results
pca_manhattan <- gwas_glm_pca_results$manhattan_plot
pca_qq <- gwas_glm_pca_results$qq_plot
pca_scree <- gwas_glm_pca_results$pca_plots$scree_plot
pca_scores <- gwas_glm_pca_results$pca_plots$pca_plot
# Print results
head(pca_results)
library(writexl)
# Extract only the results (excluding plots) and ensure it's a data frame
glm_results_df <- as.data.frame(gwas_glm_results$results)
pca_results_df <- as.data.frame(gwas_glm_pca_results$results)
# Save GLM and PCA GWAS results as Excel files
write_xlsx(glm_results_df, "GLM_GWAS_Results.xlsx")
write_xlsx(pca_results_df, "GLM_PCA_GWAS_Results.xlsx")
print("GWAS results saved as Excel files in the working directory.")
# GLM QQ Plot
print(glm_qq)
# GLM + PCA QQ Plot
print(pca_qq)
# Scree Plot
print(pca_scree)
# PCA Scores Plot (PC1 vs PC2)
print(pca_scores)
# GLM Manhattan Plot
print(glm_manhattan)
# GLM + PCA Manhattan Plot
print(pca_manhattan)
library(ggplot2)
library(writexl)
library(neugene)
source("http://zzlab.net/StaGen/2020/R/GWASbyCor.R")
# Load Genotype and SNP information
genotype <- read.table("GAPIT_genotype.txt", header = TRUE)
snp_info <- read.table("snp_info.txt", header = TRUE)
# Select first 5 chromosomes for simulation (leave rest empty)
index1to5 <- snp_info$Chromosome < 6
X1to5 <- genotype[, index1to5]
# Set random seed for reproducibility
set.seed(99164)
# Generate simulated phenotype data
source("http://zzlab.net/StaGen/2020/R/G2P.R")  # Load the function
mySim <- G2P(X = X1to5, h2 = 0.75, alpha = 1, NQTN = 10, distribution = "norm")
# Extract phenotype data
phenotype <- data.frame(Taxa = genotype[, 1], Trait = mySim$y)
# Print the first few rows
head(phenotype)
# Define number of replicates
num_replicates <- 30
# Store results
glm_pca_power <- c()
gwasbycor_power <- c()
# Start simulation loop
for (rep in 1:num_replicates) {
print(paste("Running replicate:", rep))
# Simulate phenotype for this replicate
mySim <- G2P(X = X1to5, h2 = 0.75, alpha = 1, NQTN = 10, distribution = "norm")
phenotype$Trait <- mySim$y  # Update phenotype data
# --- Run GWAS using GLM + PCA ---
gwas_glm_pca_results <- run_gwas_glm_pca(y = phenotype, X = genotype, C = NULL, snp_info = snp_info, npc = 5)
glm_pca_detected <- intersect(mySim$QTN.position, gwas_glm_pca_results$results$SNP)
# --- Run GWASbyCor ---
p_values_gwasbycor <- GWASbyCor(X = genotype[, -1], y = phenotype$Trait)
top_snps <- order(p_values_gwasbycor)[1:10]  # Get top 10 SNPs
gwasbycor_detected <- intersect(mySim$QTN.position, top_snps)
# Store detection rates
glm_pca_power[rep] <- length(glm_pca_detected) / 10  # % of true QTNs detected
gwasbycor_power[rep] <- length(gwasbycor_detected) / 10
}
devtools::document()
library(neugene)
# Load additional libraries for visualization
library(ggplot2)
library(dplyr)
setwd("C:/Users/bipin.neupane/OneDrive - Washington State University (email.wsu.edu)/Education/WSU/Courses/Statistical Genomics/HW1/neugene")
# Load phenotype data
phenotype <- read.table("phenotype.txt", header = TRUE)
# Load genotype data
genotype <- read.table("GAPIT_genotype.txt", header = TRUE)
# Load covariate data
covariates <- read.table("covariates.txt", header = TRUE)
# Load SNP information
snp_info <- read.table("snp_info.txt", header = TRUE)
# Run GWAS using General Linear Model (GLM)
gwas_glm_results <- run_gwas_glm(y = phenotype, X = genotype, C = covariates, snp_info = snp_info)
# Extract p-values and results
glm_results <- gwas_glm_results$results
glm_manhattan <- gwas_glm_results$manhattan_plot
glm_qq <- gwas_glm_results$qq_plot
# Print results
head(glm_results)
# Run GWAS using GLM with PCA correction
gwas_glm_pca_results <- run_gwas_glm_pca(y = phenotype, X = genotype, C = covariates, snp_info = snp_info, npc = 5)
# Extract p-values and results
pca_results <- gwas_glm_pca_results$results
pca_qq <- gwas_glm_pca_results$qq_plot
pca_manhattan <- gwas_glm_pca_results$manhattan_plot
pca_scree <- gwas_glm_pca_results$pca_plots$scree_plot
pca_scores <- gwas_glm_pca_results$pca_plots$pca_plot
# Print results
head(pca_results)
# Extract only the results (excluding plots) and ensure it's a data frame
glm_results_df <- as.data.frame(gwas_glm_results$results)
pca_results_df <- as.data.frame(gwas_glm_pca_results$results)
# GLM Manhattan Plot
print(glm_manhattan)
# GLM + PCA Manhattan Plot
print(pca_manhattan)
devtools::document()
# Run GWAS using General Linear Model (GLM)
gwas_glm_results <- run_gwas_glm(y = phenotype, X = genotype, C = covariates, snp_info = snp_info)
# Extract p-values and results
glm_results <- gwas_glm_results$results
glm_manhattan <- gwas_glm_results$manhattan_plot
glm_qq <- gwas_glm_results$qq_plot
# Run GWAS using GLM with PCA correction
gwas_glm_pca_results <- run_gwas_glm_pca(y = phenotype, X = genotype, C = covariates, snp_info = snp_info, npc = 5)
# Extract p-values and results
pca_results <- gwas_glm_pca_results$results
pca_manhattan <- gwas_glm_pca_results$manhattan_plot
pca_qq <- gwas_glm_pca_results$qq_plot
pca_scree <- gwas_glm_pca_results$pca_plots$scree_plot
pca_scores <- gwas_glm_pca_results$pca_plots$pca_plot
# GLM Manhattan Plot
print(glm_manhattan)
